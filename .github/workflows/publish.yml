name: package and publish to npm

on:
  push:
    tags:
      - '*'
jobs:
  nodejs-npm:
    name: nodejs-npm
    runs-on: ubuntu-latest
    # Prevent a situation where native build fails and an npm package is uploaded.
    needs: [nodejs-github-native, nodejs-github-native-musl]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        # Set release version in all three os, the commented run should suffice for linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          # Url is important! This makes NODE_AUTH_TOKEN accessible to npm publish.
          registry-url: 'https://registry.npmjs.org'
      - name: Install modules
        run: npm i

      - name: Tweak package.json
        # This will update the package version to tag version and
        # add an install script in package.json so users who `npm i` this package
        # will trigger the node-pre-gyp to pull the os and arch specific binary.
        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['scripts']['install'] = 'node-pre-gyp install'; p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"
      - name: Publish to npm
        # `--access public` is used to publish to my account's scope.
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  nodejs-github-native:
    name: nodejs-${{ matrix.node_version }}-${{ matrix.system.target }}-${{ matrix.system.os }}
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 16
          - 18
          - 20
          - 22
          - 24
        system:
          # apple-darwin is being skipped because the runner is taking too long to start.
          #- os: macos-11
          #target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-2022
            target: x86_64-pc-windows-msvc
          # Would like to have aarch64 support, but actions does not provide these yet.
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        # Set release version in all three os, the commented run should suffice for linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Install modules
        run: npm i
      - name: Tweak package.json
        # This will update the package version to tag version. So artifacts uploaded to Github release will be named correctly.
        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.system.target }}
          override: true

      - name: Build native
        run: npm run release:native
      - name: Package the asset
        # This will make a node-pre-gyp package.
        run: npx node-pre-gyp package
      - name: Upload to Github releases
        # Use bash, even on Windows to make find available
        shell: bash
        # A release need to be created before upload
        run: gh release upload ${{ env.RELEASE_VERSION }} "$(find ./build -name *.tar.gz)" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  nodejs-github-native-musl:
    name: musl-branch-${{ matrix.branch }}-x86_64-unknown-linux-musl-${{ matrix.system.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch:
          - v3.22 #Node 22
          #- v3.19 #Node 20 not working for some reason (Error relocating /usr/bin/node: _ZN3ada7unicode10to_unicodeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEE: symbol not found)
          - v3.18
          - v3.16
        system:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        # Set release version in all three os, the commented run should suffice for linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: ${{ matrix.branch }}

      - name: install nodejs
        run: |
          apk update
          apk upgrade
          apk add --no-cache nodejs
        shell: alpine.sh --root {0}

      - name: install npm
        run: |
          apk update
          apk upgrade --ignore nodejs
          apk add --no-cache npm
        shell: alpine.sh --root {0}

      - name: install cargo
        run: |
          echo "https://dl-cdn.alpinelinux.org/alpine/edge/main/" > /etc/apk/repositories
          apk update
          apk upgrade --ignore nodejs --ignore npm
          apk add cargo
        shell: alpine.sh --root {0}

      - name: Install modules
        run: |
          npm i
        shell: alpine.sh --root {0}

      - name: Tweak package.json
        # This will update the package version to tag version. So artifacts uploaded to Github release will be named correctly.
        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"

      - name: Build native
        run: |
          npm run release:native
        shell: alpine.sh --root {0}

      - name: Package the asset
        run: |
          npx node-pre-gyp package
        shell: alpine.sh --root {0}

      - name: Upload to Github releases
        # Use bash, even on Windows to make find available
        shell: bash
        # A release need to be created before upload
        run: gh release upload ${{ env.RELEASE_VERSION }} "$(find ./build -name *.tar.gz)" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
